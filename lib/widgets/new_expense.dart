import 'package:flutter/material.dart';
import 'package:third_app/models/expense.dart';

class NewExpense extends StatefulWidget {
  /*
  –í—Å–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –ø–µ—Ä–µ–¥–∞—ë—à—å –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä NewExpense, —Ö—Ä–∞–Ω—è—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ –æ–±—ä–µ–∫—Ç–∞ widget.
  –≠—Ç–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ Flutter –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤ –∫–∞–∂–¥–æ–º –∫–ª–∞—Å—Å–µ State.

  State –æ—Ç–¥–µ–ª—ë–Ω –æ—Ç Widget.
  –ü–æ—ç—Ç–æ–º—É –≤—Å—ë, —á—Ç–æ –ø–µ—Ä–µ–¥–∞–Ω–æ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä NewExpense, –¥–æ—Å—Ç—É–ø–Ω–æ –≤–Ω—É—Ç—Ä–∏ State —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ widget.

  widget –≤ –∫–ª–∞—Å—Å–µ State ‚Äî —ç—Ç–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–º StatefulWidget (NewExpense).
  –ß–µ—Ä–µ–∑ –Ω–µ–≥–æ –º—ã –ø–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ (onAddExpense, key, –∏ —Ç.–ø.), 
  –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–¥–∂–µ—Ç–∞. 
  */
  const NewExpense({super.key, required this.onAddExpense});

  final void Function(Expense expense) onAddExpense;

  @override
  State<NewExpense> createState() {
    return _NewExpenseState();
  }
}

class _NewExpenseState extends State<NewExpense> {
  /*
  IF YOU HAVE MULTIPLE FIELDS you need MULTIPLE CONTROLLERS
  TextEditingController - —Ö—Ä–∞–Ω–∏—Ç —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ (.text),
  —É–º–µ–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –∫—É—Ä—Å–æ—Ä–æ–º, –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º,
  –∏ —Ä–∞—Å—Å—ã–ª–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–ª—É—à–∞—Ç–µ–ª—è–º (listeners) –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞.
  –ü–æ —Å—É—Ç–∏ —ç—Ç–æ –º–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è TextField.

  –ï—Å–ª–∏ —Ç—ã –Ω–µ –≤—ã–∑–æ–≤–µ—à—å dispose(), —Ç–æ TextEditingController –ø—Ä–æ–¥–æ–ª–∂–∏—Ç –∂–∏—Ç—å –≤ –ø–∞–º—è—Ç–∏, 
  –ø–æ—Ç–æ–º—É —á—Ç–æ –Ω–∞ –Ω–µ–≥–æ –º–æ–≥—É—Ç –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω—ã —Å–ª—É—à–∞—Ç–µ–ª–∏ (addListener).
*/

  // Properties
  final _titleController = TextEditingController();
  final _amountController = TextEditingController();
  DateTime? _selectedDate;
  Category? _selectedCategory;

  // Methods
  void _presentDatePicker() async {
    final now = DateTime.now();
    final firstDate = DateTime(
      now.year - 1,
      now.month,
      now.day,
    ); // today - 1 year

    final pickedDate = await showDatePicker(
      context: context,
      initialDate: now,
      firstDate: firstDate,
      lastDate: now,
    );
    // old style
    // .then((value) {
    // });

    /*
      –µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å  setState(() –¥–∞–ª—å—à–µ —Ç–æ Flutter –Ω–µ ¬´—É–∑–Ω–∞–µ—Ç¬ª, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –∏–∑–º–µ–Ω–∏–ª–∞—Å—å.
      UI –Ω–µ –ø–µ—Ä–µ—Å—Ç—Ä–æ–∏—Ç—Å—è.
      –í –∏—Ç–æ–≥–µ –Ω–∞ —ç–∫—Ä–∞–Ω–µ –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É –±—É–¥–µ—Ç ¬´No date selected¬ª, —Ö–æ—Ç—è –≤ _selectedDate —É–∂–µ –µ—Å—Ç—å –¥–∞—Ç–∞.
      –ø–æ—ç—Ç–æ–º—É _selectedDate –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–¥–µ—Å—å
    */
    setState(() {
      _selectedDate = pickedDate;
    });
  }

  void _submitExpenseData() {
    final enteredAmount = double.tryParse(
      _amountController.text,
    ); // tryParse("abc") => null
    final amountIsInvalid = enteredAmount == null || enteredAmount <= 0;
    if (_titleController.text.trim().isEmpty ||
        amountIsInvalid ||
        _selectedDate == null ||
        _selectedCategory == null) {
      // show error message
      showDialog(
        context: context,
        builder: (ctx) => AlertDialog(
          title: Text('Invalid input'),
          content: const Text(
            'Please make sure a valid title, amount, date and category was entered...',
          ),
          actions: [
            TextButton(
              onPressed: () {
                Navigator.pop(ctx);
              },
              child: const Text('Okay'),
            ),
          ],
        ),
      );
      return;
    }

    // proceed if all required data exist

    widget.onAddExpense(
      Expense(
        title: _titleController.text,
        amount: enteredAmount,
        date: _selectedDate!,
        category: _selectedCategory!,
      ),
    );

     Navigator.pop(context);
  }

  // Lifecycle

  @override
  Widget build(BuildContext context) {

/*
.viewInsets - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±–ª–∞—Å—Ç–∏ —ç–∫—Ä–∞–Ω–∞, –∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ–∫—Ä—ã—Ç—ã "—Å–∏—Å—Ç–µ–º–Ω—ã–º–∏ UI-—ç–ª–µ–º–µ–Ω—Ç–∞–º–∏" (–æ–±—ã—á–Ω–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞).
–ü–æ —Å—É—Ç–∏ ‚Äî —ç—Ç–æ ¬´–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –≤—Å—Ç–∞–≤–∫–∏¬ª (insets), –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —É—á–µ—Å—Ç—å, —á—Ç–æ–±—ã —Ç–≤–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç 
–Ω–µ –æ–∫–∞–∑–∞–ª—Å—è –ø–æ–¥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∏–ª–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π.
*/
final keyboardSpace = MediaQuery.of(context).viewInsets.bottom;

/*
SingleChildScrollView - –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ.
–†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –æ–¥–Ω–∏–º —Ä–µ–±—ë–Ω–∫–æ–º (–æ—Ç—Å—é–¥–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ).
–û–±—ã—á–Ω–æ —Ä–µ–±—ë–Ω–∫–æ–º –±—ã–≤–∞–µ—Ç Column –∏–ª–∏ Row.
–ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –º–µ–Ω—å—à–µ, —á–µ–º —ç–∫—Ä–∞–Ω ‚Üí —Å–∫—Ä–æ–ª–ª–∞ –Ω–µ—Ç.
–ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –±–æ–ª—å—à–µ ‚Üí –ø–æ—è–≤–ª—è–µ—Ç—Å—è —Å–∫—Ä–æ–ª–ª (–ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏ –∏–ª–∏ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏).


SizedBox(height: double.infinity - –ø–æ—á–µ–º—É –¥–æ–±–∞–≤–ª–µ–Ω–æ –µ—â–µ ? 

SingleChildScrollView –ø–æ —Å–≤–æ–µ–π –ø—Ä–∏—Ä–æ–¥–µ —Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É.
–ï—Å–ª–∏ —Ä–µ–±—ë–Ω–æ–∫ (Column) –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –ø–æ –≤—ã—Å–æ—Ç–µ, —Ç–æ:
–æ–Ω –≤–æ–∑—å–º—ë—Ç –≤—ã—Å–æ—Ç—É —Ä–æ–≤–Ω–æ –ø–æ–¥ —Å–≤–æ–∏ —ç–ª–µ–º–µ–Ω—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 400 px).
–∏ SingleChildScrollView —Ç–æ–∂–µ —Å—Ç–∞–Ω–µ—Ç —Ç–∞–∫–æ–π –≤—ã—Å–æ—Ç—ã.

SizedBox(height: double.infinity) –Ω—É–∂–µ–Ω, —á—Ç–æ–±—ã:
–∑–∞—Å—Ç–∞–≤–∏—Ç—å —Ñ–æ—Ä–º—É –∑–∞–Ω–∏–º–∞—Ç—å –≤—Å—é –≤—ã—Å–æ—Ç—É —ç–∫—Ä–∞–Ω–∞ (–æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å SingleChildScrollView –æ—Ç "—Å—Ö–ª–æ–ø—ã–≤–∞–Ω–∏—è");
–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∏ –ø–∞–¥–¥–∏–Ω–≥–∞–º–∏;
–ø–æ–∑–≤–æ–ª–∏—Ç—å —Å–∫—Ä–æ–ª–ª—É –ø–æ—è–≤–ª—è—Ç—å—Å—è —Ç–æ–ª—å–∫–æ —Ç–æ–≥–¥–∞, –∫–æ–≥–¥–∞ —Ä–µ–∞–ª—å–Ω–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–µ—Å—Ç–∞.

üîπ –ß—Ç–æ —ç—Ç–æ –¥–∞—ë—Ç –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ
–ö–æ–≥–¥–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –º–∞–ª–æ ‚Üí —Ñ–æ—Ä–º–∞ –≤—Å—ë —Ä–∞–≤–Ω–æ —Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ—Ç—Å—è –Ω–∞ –≤—ã—Å–æ—Ç—É —ç–∫—Ä–∞–Ω–∞, 
–∏ —ç–ª–µ–º–µ–Ω—Ç—ã ¬´–ø—Ä–∏–∂–∏–º–∞—é—Ç—Å—è¬ª –∫—É–¥–∞ –Ω–∞–¥–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–∞–¥–¥–∏–Ω–≥ —Å–Ω–∏–∑—É —É—á–∏—Ç—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É).

–ö–æ–≥–¥–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –º–Ω–æ–≥–æ ‚Üí SingleChildScrollView –º–æ–∂–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ —Å–∫—Ä–æ–ª–ª–∏—Ç—å—Å—è, 
–ø–æ—Ç–æ–º—É —á—Ç–æ —É –Ω–µ–≥–æ —Ç–µ–ø–µ—Ä—å –µ—Å—Ç—å ¬´—Ä–∞–º–∫–∞¬ª (–≤—ã—Å–æ—Ç–∞ —ç–∫—Ä–∞–Ω–∞).
*/
    return SizedBox(
      height: double.infinity,
      child: SingleChildScrollView(
        child: Padding(
          padding: EdgeInsets.fromLTRB(16, 48, 16, keyboardSpace + 16),
          child: Column(
            children: [
              TextField(
                controller: _titleController,
                maxLength: 50,
                // keyboardType: TextInputType.text, // - TextInputType.text established by default
                decoration: const InputDecoration(
                  // placeholder
                  label: Text('Title'),
                ),
              ),
        
              Row(
                children: [
                  Expanded(
                    child: TextField(
                      controller: _amountController,
                      keyboardType: TextInputType.number,
        
                      // keyboardType: TextInputType.text, // - TextInputType.text established by default
                      decoration: const InputDecoration(
                        // placeholder
                        prefixText: '\$ ',
                        label: Text('Amount'),
                      ),
                    ),
                  ),
        
                  const SizedBox(width: 16),
        
                  Expanded(
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.end,
                      crossAxisAlignment: CrossAxisAlignment.center,
                      children: [
                        Text(
                          _selectedDate == null
                              ? 'No date selected'
                              : formatter.format(_selectedDate!),
                        ),
                        IconButton(
                          onPressed: _presentDatePicker,
                          icon: const Icon(Icons.calendar_month),
                        ),
                      ],
                    ),
                  ),
                ],
              ),
        
              const SizedBox(height: 16),
        
              Row(
                children: [
                  DropdownButton(
                    value: _selectedCategory, // if null we see hint
                    hint: const Text("Choose category"),
                    items: Category.values
                        .map(
                          // map - always retur iterable
                          (categoryItem) => DropdownMenuItem(
                            value: categoryItem,
                            child: Text(
                              categoryItem.name
                                  .toUpperCase(), // .toString() returns "Category.food"
                            ),
                          ),
                        )
                        .toList(),
                    onChanged: (value) {
                      // if (value == null) {
                      //   return;
                      // }
                      setState(() {
                        _selectedCategory = value;
                      });
                    },
                  ),
        
                  const Spacer(),
        
                  TextButton(
                    onPressed: () {
                      Navigator.pop(context);
                    },
                    child: const Text("Cancel"),
                  ),
        
                  ElevatedButton(
                    onPressed: _submitExpenseData,
                    child: Text('Save Expense'),
                  ),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }

  @override
  void dispose() {
    _titleController.dispose();
    _amountController.dispose();
    super.dispose();
  }
}
